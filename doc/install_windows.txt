Windows Development Environment
-------------------------------
To compile PortaBase for use as a Windows desktop application, you will
need the following:
- Windows 7, 8.1, or 10
- The latest version of Qt (from https://www.qt.io/download-qt-installer)
  that supports your OS version.  Configure the installer to also install
  the latest version of the MinGW compiler, if you don't already have it.
  Add both the "Qt\5.*\mingw*\bin" directory and the "Tools\mingw*\bin"
  directory that were installed to your "Path" environment variable via
  Control Panel.
- MSYS2 (https://www.msys2.org/).  This emulates a basic UNIX system on
  Windows, and is the easiest way to compile Metakit with MinGW.
- Inno Setup, if you wish to create the PortaBase installer; available from:
  http://www.jrsoftware.org/isinfo.php

Metakit Compilation
-------------------
To compile PortaBase, Metakit (http://www.equi4.com/metakit/) must be compiled
first.  PortaBase uses a version of 2.4.9.8 patched to allow case-sensitive
searches and locale-sensitive sorting; the patched version is included in the
"metakit" directory for convenience (and to support the Debian and Maemo
autobuilders).

To compile Metakit for Windows, first install MSYS2 as mentioned above.  Start
MSYS 64-bit from the installed shortcut, and run the following command to
install the tools needed to compile Metakit:

* pacman -S autoconf gcc make

Then change to the metakit/builds directory that is included with the PortaBase
source code.  Note that you use "cd" to change directories, use "/" as the
directory separator, and the C: drive is located at "/c".  From the
metakit/builds directory, run "../unix/configure --enable-threads --disable-shared".
Once that finishes, run "make".  You should now have a libmk4.a static library
file in that directory.

Installing Python and Sphinx
----------------------------
If you want to generate the help files and/or a PortaBase installer, you'll
need to install these if you don't already have them.  Download the latest
Python 3 installer from http://www.python.org/downloads/ and run it; choose
the option on the installer's first screen to add Python to your PATH.  Running
"pip install sphinx_rtd_theme" from PowerShell will install Sphinx, the theme
used by the documentation, and all the other Python libraries that they depend
on.  To be able to automatically download the latest help page translations
from Transifex, also run "pip install transifex-client".

Generating the Help Files
-------------------------
The script for generating the PortaBase installer does this automatically, but
there is also a script for doing it separately (in case, for example, you're a
translator wanting to test the output before a release).  After installing
Python, Sphinx, gettext, and perhaps transifex-client as described above, run
"packaging\windows\generate_help en" to generate the English help files.
Replace "en" with the ISO code for another locale to generate the documentation
in that language, assuming translations are available for it.  To generate a
copy of the help files with the latest translations for a language from
Transifex, you could instead run the command like
"packaging\windows\generate_help --update ja" (which would generate the
Japanese help files).

PortaBase Compilation and Packaging
-----------------------------------
- Compile Metakit as described above.
- Open a command prompt, and change to the root directory of the downloaded
  PortaBase source code.
- From that directory run "packaging\windows\build.bat"; this will generate a
  working PortaBase.exe file in the "build" directory.
- If you want to create an installer for PortaBase, first install Inno Setup,
  Python, and Sphinx (for the help pages, as described above).  Then run
  "packaging\windows\installer.bat"; you may need to edit it first in order to
  adjust the paths to Qt and/or Inno Setup. This will generate an executable
  installer in the "build/windows" directory.
